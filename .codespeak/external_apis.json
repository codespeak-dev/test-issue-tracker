[
    {
        "config_parameters": [
            {
                "guidance": "To obtain a Slack Bot Token:\n\n1. Go to https://api.slack.com/apps and click 'Create New App'\n2. Choose 'From scratch' and provide an app name (e.g., 'Bugger Issue Tracker')\n3. Select your workspace and click 'Create App'\n4. In the left sidebar, click 'OAuth & Permissions'\n5. Scroll down to 'Scopes' section and add the following Bot Token Scopes:\n   - chat:write (to post messages)\n   - chat:write.public (to post to public channels)\n6. Scroll up and click 'Install to Workspace'\n7. Review permissions and click 'Allow'\n8. Copy the 'Bot User OAuth Token' (starts with 'xoxb-')\n9. This token should be kept secure and used as the slack_bot_token parameter",
                "name": "slack_bot_token",
                "type": "input"
            },
            {
                "guidance": "To obtain the Slack Channel ID:\n\n1. Open Slack in your web browser or desktop app\n2. Navigate to the channel where you want issue notifications to be posted\n3. Right-click on the channel name in the sidebar\n4. Select 'Copy link' from the context menu\n5. The link will look like: https://yourworkspace.slack.com/archives/C1234567890\n6. The Channel ID is the part after '/archives/' (e.g., 'C1234567890')\n7. Alternatively, you can find the Channel ID at the bottom of the channel details when you click on the channel name\n8. Use this Channel ID as the slack_channel_id parameter",
                "name": "slack_channel_id",
                "type": "input"
            }
        ],
        "name": "slack",
        "sdk_choice": {
            "api_name": "slack",
            "kind": "existing",
            "uv_package_name": "slack-sdk"
        },
        "use_cases": [
            {
                "description": "Post a message to a configured Slack channel when a new issue is created",
                "spec_source_quote": "When a new issue is created, a message is posted to the channel"
            }
        ]
    },
    {
        "config_parameters": [
            {
                "guidance": "To obtain a GitHub Personal Access Token:\n\n1. Go to https://github.com/settings/tokens\n2. Click 'Generate new token' and select 'Generate new token (classic)'\n3. Add a note describing the token (e.g., 'Bugger Issue Tracker Integration')\n4. Set expiration as needed (recommended: 90 days or 1 year)\n5. Select the following scopes:\n   - repo (Full control of private repositories) - needed to access commit information\n   - read:org (Read org and team membership) - if working with organization repositories\n6. Click 'Generate token'\n7. Copy the generated token immediately (it won't be shown again)\n8. Store this token securely and use it as the github_personal_access_token parameter",
                "name": "github_personal_access_token",
                "type": "input"
            },
            {
                "guidance": "To configure the GitHub repository URL:\n\n1. Navigate to your GitHub repository in a web browser\n2. Copy the repository URL from the address bar (e.g., 'https://github.com/username/repository-name')\n3. Alternatively, you can use the format: 'https://github.com/OWNER/REPO'\n   - Replace OWNER with the username or organization name\n   - Replace REPO with the repository name\n4. This should be the repository where commits will be monitored for issue references\n5. Use this URL as the github_repository_url parameter",
                "name": "github_repository_url",
                "type": "input"
            },
            {
                "guidance": "To set up GitHub webhook secret:\n\n1. Go to your GitHub repository settings\n2. Click on 'Webhooks' in the left sidebar\n3. Click 'Add webhook'\n4. Set the Payload URL to your application's webhook endpoint (e.g., 'https://yourdomain.com/webhooks/github')\n5. Set Content type to 'application/json'\n6. Generate a secure random string for the Secret field (you can use online generators or command: openssl rand -hex 20)\n7. Select 'Let me select individual events' and choose:\n   - Push events (to monitor commits)\n   - Pull request events (to monitor merges)\n8. Ensure 'Active' is checked and click 'Add webhook'\n9. Use the same secret string you generated as the github_webhook_secret parameter",
                "name": "github_webhook_secret",
                "type": "input"
            }
        ],
        "name": "github",
        "sdk_choice": {
            "api_name": "github",
            "kind": "existing",
            "uv_package_name": "pygithub"
        },
        "use_cases": [
            {
                "description": "Monitor repository commits for merge events containing issue references in commit messages",
                "spec_source_quote": "When a commit is merged with `#<issue-id> Fixed` in the commit message, the issue is closed and a comment is added to the issue"
            },
            {
                "description": "Extract commit information including commit message and generate commit URL for linking",
                "spec_source_quote": "a comment is added to the issue with the commit message and a link to the commit"
            }
        ]
    }
]